@page "/register"
@using System.Security.Claims
@using DTO.Auth
@using web.Auth
@using web.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<AuthorizeView>
    <NotAuthorized>
        <div class="container my-5">
            <div class="card shadow-sm mx-auto" style="max-width: 500px;">
                <div class="card-body">
                    <h2 class="text-center mb-4">Register</h2>

                    @if (errorMessage != null)
                    {
                        <div class="alert alert-danger" role="alert">@errorMessage</div>
                    }

                    @if (successMessage != null)
                    {
                        <div class="alert alert-success" role="alert">@successMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input class="form-control" @bind="username" placeholder="Enter your username"/>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" @bind="password" placeholder="Enter your password"/>
                    </div>

                    <button class="btn btn-primary w-100" @onclick="RegisterAsync">
                        <i class="bi bi-person-plus"></i> Register
                    </button>

                    <p class="mt-3 text-center">
                        Already have an account? <a href="/login">Login here</a>
                    </p>
                </div>
            </div>
        </div>
    </NotAuthorized>
    
    <Authorized>
        <Authorized>
            <div class="container text-center my-5">
                <div class="alert alert-warning" role="alert">
                    <h3 class="mb-4">You are currently logged in as @context.User.Claims.First(claim => claim.Type.Equals(ClaimTypes.Role)).Value</h3>
                    <button class="btn btn-primary btn-lg" @onclick="OnLogout">
                        <i class="bi bi-box-arrow-in-right"></i> Logout
                    </button>
                </div>
            </div>
        </Authorized>
    </Authorized>
</AuthorizeView>

@code {
    private string username = "";
    private string password = "";
    private string? errorMessage;
    private string? successMessage;

    private async Task RegisterAsync()
    {
        errorMessage = null;
        successMessage = null;

        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Username and password cannot be empty.";
            return;
        }

        var createUserDto = new CreateUserDto
        {
            Username = username,
            Password = password
        };

        try
        {
            await AuthService.RegisterAsync(createUserDto);
            successMessage = "Registration successful! Redirecting to login...";
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }
    
    private async void OnLogout()
    {
        await ((CAuthenticationStateProvider) AuthProvider).Logout();
        Navigation.NavigateTo("/");
    }

}