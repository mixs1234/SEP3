@page "/login"
@using web.Auth
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<div class="container my-5">
    <div class="card shadow-sm mx-auto" style="max-width: 500px;">
        <div class="card-body">
            <h2 class="text-center mb-4">Login</h2>

            <AuthorizeView>
                <Authorized>
                    <div class="alert alert-success text-center" role="alert">
                        <h4>You are already logged in!</h4>
                        <a href="/" class="btn btn-primary mt-3">
                            <i class="bi bi-house-door"></i> Go to Home
                        </a>
                    </div>
                </Authorized>

                <NotAuthorized>
                    @if (errorMessage != null)
                    {
                        <div class="alert alert-danger" role="alert">@errorMessage</div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input class="form-control" @bind="username" placeholder="Enter your username" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" @bind="password" placeholder="Enter your password" />
                    </div>

                    <button class="btn btn-primary w-100" @onclick="LoginAsync">
                        <i class="bi bi-box-arrow-in-right"></i> Login
                    </button>

                    <p class="mt-3 text-center">
                        Don't have an account? <a href="/register">Register here</a>
                    </p>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@code {
    private string username = "";
    private string password = "";
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }
    
    private async Task LoginAsync()
    {
        errorMessage = "";
        try
        {
            await ((CAuthenticationStateProvider)AuthProvider).Login(username, password);
            Navigation.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            errorMessage = $"Error: {e.Message}";
        }
    }
}