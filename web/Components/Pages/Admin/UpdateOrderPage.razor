@page "/admin/update-order"
@using web.Model.Order
@using web.Services
@inject IOrderService OrderService
@inject IStatusService StatusService
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="ADMIN">
    <div class="container my-5">
        <h1 class="mb-4">Admin Panel - Update Order</h1>

        <!-- Purchase Popup -->
        <div aria-live="polite" aria-atomic="true" class="position-relative">
            <div class="toast-container position-fixed bottom-0 end-0 p-3">
                <div id="cartToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <strong class="me-auto">Order Notification</strong>
                        <small class="text-muted">Just now</small>
                        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    <div class="toast-body">
                        Item added to your cart!
                    </div>
                </div>
            </div>
        </div>
    
        <div class="mb-3">
            <input
                type="text"
                class="form-control"
                placeholder="Search orders by status..."
                @bind="SearchTerm"
                @bind:event="oninput" />
        </div>

        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
            <tr>
                <th scope="col">Order ID</th>
                <th scope="col">Customer ID</th>
                <th scope="col">Current Status</th>
                <th scope="col">Actions</th>
            </tr>
            </thead>
            <tbody>
            @if (_filteredOrders.Any())
            {
                @foreach (var order in _filteredOrders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerId</td>
                        <td>
                            <select class="form-select" @bind="order.StatusId">
                                @foreach (var status in _statusList)
                                {
                                    <option value="@status.Id">@status.StatusName</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => SaveChanges(order)">Save</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="text-center">No orders found</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</AuthorizeView>

<AuthorizeView Roles="CUSTOMER">
    <img width="600" src="https://i.kym-cdn.com/entries/icons/original/000/002/144/You_Shall_Not_Pass!_0-1_screenshot.jpg"/>
    <p>You'll have to log in!</p>
</AuthorizeView>

@code {
    private List<Order>? _orders = new();
    private List<CurrentStatus>? _statusList = new();
    private List<Order>? _filteredOrders = new();
    private string _searchTerm = string.Empty;

    private string SearchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            FilterOrders();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _orders = await OrderService.GetOrdersAsync();
        _statusList = await StatusService.GetStatusesAsync();
        _filteredOrders = _orders;
    }

    private void FilterOrders()
    {
        if (string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredOrders = _orders;
        }
        else
        {
            _filteredOrders = _orders
                .Where(o => o.CurrentStatus?.StatusName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) == true)
                .ToList();
        }
    }

    private async Task SaveChanges(Order order)
    {
        
        Console.WriteLine($"Order ID: {order.Id}, Status ID: {order.StatusId}");
        
        // Update the order's status in the database
        await OrderService.UpdateOrderAsync(order.Id, order.StatusId);

        // Refresh orders list to reflect changes
        _orders = await OrderService.GetOrdersAsync();
        await JSRuntime.InvokeVoidAsync("showCartToast", $"#{order.Id} is now updated to {_statusList.FirstOrDefault(s => s.Id == order.StatusId)?.StatusName}!");
        FilterOrders();
    }
}
